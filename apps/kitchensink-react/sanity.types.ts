/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

import {type DatasetScoped, type DocumentTypeScoped, type ExtractDataset} from 'groq'

export declare const internalGroqTypeReferenceTo: unique symbol

export type SanityImagePaletteSwatch =
  | DatasetScoped<
      {
        _type: 'sanity.imagePaletteSwatch'
        background?: string
        foreground?: string
        population?: number
        title?: string
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imagePaletteSwatch'
        background?: string
        foreground?: string
        population?: number
        title?: string
      },
      'production',
      'ezwd8xes'
    >

export type SanityImagePalette =
  | DatasetScoped<
      {
        _type: 'sanity.imagePalette'
        darkMuted?: SanityImagePaletteSwatch
        lightVibrant?: SanityImagePaletteSwatch
        darkVibrant?: SanityImagePaletteSwatch
        vibrant?: SanityImagePaletteSwatch
        dominant?: SanityImagePaletteSwatch
        lightMuted?: SanityImagePaletteSwatch
        muted?: SanityImagePaletteSwatch
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imagePalette'
        darkMuted?: SanityImagePaletteSwatch
        lightVibrant?: SanityImagePaletteSwatch
        darkVibrant?: SanityImagePaletteSwatch
        vibrant?: SanityImagePaletteSwatch
        dominant?: SanityImagePaletteSwatch
        lightMuted?: SanityImagePaletteSwatch
        muted?: SanityImagePaletteSwatch
      },
      'production',
      'ezwd8xes'
    >

export type SanityImageDimensions =
  | DatasetScoped<
      {
        _type: 'sanity.imageDimensions'
        height?: number
        width?: number
        aspectRatio?: number
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imageDimensions'
        height?: number
        width?: number
        aspectRatio?: number
      },
      'production',
      'ezwd8xes'
    >

export type SanityFileAsset =
  | DatasetScoped<
      {
        _id: string
        _type: 'sanity.fileAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        source?: SanityAssetSourceData
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _id: string
        _type: 'sanity.fileAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        source?: SanityAssetSourceData
      },
      'production',
      'ezwd8xes'
    >

export type Geopoint =
  | DatasetScoped<
      {
        _type: 'geopoint'
        lat?: number
        lng?: number
        alt?: number
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'geopoint'
        lat?: number
        lng?: number
        alt?: number
      },
      'production',
      'ezwd8xes'
    >

export type Slug =
  | DatasetScoped<
      {
        _type: 'slug'
        current?: string
        source?: string
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'slug'
        current?: string
        source?: string
      },
      'production',
      'ezwd8xes'
    >

export type Book = DatasetScoped<
  {
    _id: string
    _type: 'book'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    author?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'author'
    }
    coverImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    publicationYear?: number
    reviewsInline?: Array<{
      title?: string
      _type: 'review'
      _key: string
    }>
    genre?: 'fiction' | 'nonfiction' | 'poetry'
  },
  'test',
  'ppsg7ml5'
>

export type Author = DatasetScoped<
  {
    _id: string
    _type: 'author'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: string
    bestFriend?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'author'
    }
    role?: 'developer' | 'designer' | 'ops'
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    awards?: Array<string>
    favoriteBooks?: Array<{
      _ref: string
      _type: 'reference'
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: 'book'
    }>
    minimalBlock?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
  },
  'test',
  'ppsg7ml5'
>

export type SanityImageCrop =
  | DatasetScoped<
      {
        _type: 'sanity.imageCrop'
        top?: number
        bottom?: number
        left?: number
        right?: number
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imageCrop'
        top?: number
        bottom?: number
        left?: number
        right?: number
      },
      'production',
      'ezwd8xes'
    >

export type SanityImageHotspot =
  | DatasetScoped<
      {
        _type: 'sanity.imageHotspot'
        x?: number
        y?: number
        height?: number
        width?: number
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imageHotspot'
        x?: number
        y?: number
        height?: number
        width?: number
      },
      'production',
      'ezwd8xes'
    >

export type SanityImageAsset =
  | DatasetScoped<
      {
        _id: string
        _type: 'sanity.imageAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        metadata?: SanityImageMetadata
        source?: SanityAssetSourceData
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _id: string
        _type: 'sanity.imageAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        metadata?: SanityImageMetadata
        source?: SanityAssetSourceData
      },
      'production',
      'ezwd8xes'
    >

export type SanityAssetSourceData =
  | DatasetScoped<
      {
        _type: 'sanity.assetSourceData'
        name?: string
        id?: string
        url?: string
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.assetSourceData'
        name?: string
        id?: string
        url?: string
      },
      'production',
      'ezwd8xes'
    >

export type SanityImageMetadata =
  | DatasetScoped<
      {
        _type: 'sanity.imageMetadata'
        location?: Geopoint
        dimensions?: SanityImageDimensions
        palette?: SanityImagePalette
        lqip?: string
        blurHash?: string
        hasAlpha?: boolean
        isOpaque?: boolean
      },
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      {
        _type: 'sanity.imageMetadata'
        location?: Geopoint
        dimensions?: SanityImageDimensions
        palette?: SanityImagePalette
        lqip?: string
        blurHash?: string
        hasAlpha?: boolean
        isOpaque?: boolean
      },
      'production',
      'ezwd8xes'
    >

export type Dog = DatasetScoped<
  {
    _id: string
    _type: 'dog'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name?: string
    age?: string
    color?: string
    ears?: string
    status?: string
    weight?: string
    description?: string
    images?: Array<{
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }>
  },
  'production',
  'ezwd8xes'
>

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Slug
  | Book
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Dog

declare module 'groq' {
  interface SanitySchemas {
    'ppsg7ml5:test': ExtractDataset<AllSanitySchemaTypes, 'test', 'ppsg7ml5'>
    'ezwd8xes:production': ExtractDataset<AllSanitySchemaTypes, 'production', 'ezwd8xes'>
  }
}

// Source: ./src/DocumentCollection/DocumentProjectionRoute.tsx
// Variable: authorProjection
// Projection: {    name,    "favoriteBookTitles": favoriteBooks[]->{title}.title  }
export type AuthorProjectionProjectionResult =
  | DatasetScoped<
      DocumentTypeScoped<
        {
          name: string | null
          favoriteBookTitles: Array<string | null> | null
        },
        'author'
      >,
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      DocumentTypeScoped<
        {
          name: string | null
          favoriteBookTitles: null
        },
        'dog'
      >,
      'production',
      'ezwd8xes'
    >

// Source: ./src/DocumentCollection/DocumentProjectionRoute.tsx
// Variable: bestFriendProjection
// Projection: {    name,    'bestFriendName': bestFriend->{name}.name,    role  }
export type BestFriendProjectionProjectionResult =
  | DatasetScoped<
      DocumentTypeScoped<
        {
          name: string | null
          bestFriendName: string | null
          role: 'designer' | 'developer' | 'ops' | null
        },
        'author'
      >,
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<
      DocumentTypeScoped<
        {
          name: string | null
          bestFriendName: null
          role: null
        },
        'dog'
      >,
      'production',
      'ezwd8xes'
    >

// Source: ./src/DocumentCollection/OrgDocumentExplorerRoute.tsx
// Variable: allTypes
// Query: array::unique(*[]._type)
export type AllTypesResult =
  | DatasetScoped<
      Array<'author' | 'book' | 'sanity.fileAsset' | 'sanity.imageAsset'>,
      'test',
      'ppsg7ml5'
    >
  | DatasetScoped<Array<'dog' | 'sanity.fileAsset' | 'sanity.imageAsset'>, 'production', 'ezwd8xes'>

declare module 'groq' {
  interface SanityQueries {
    'array::unique(*[]._type)': AllTypesResult
  }
  interface SanityProjections {
    '{\n    name,\n    "favoriteBookTitles": favoriteBooks[]->{title}.title\n  }': AuthorProjectionProjectionResult
    "{\n    name,\n    'bestFriendName': bestFriend->{name}.name,\n    role\n  }": BestFriendProjectionProjectionResult
  }
}
