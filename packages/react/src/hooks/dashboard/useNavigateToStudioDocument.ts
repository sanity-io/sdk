import {type Status} from '@sanity/comlink'
import {type Bridge, SDK_CHANNEL_NAME, SDK_NODE_NAME} from '@sanity/message-protocol'
import {type DocumentHandle} from '@sanity/sdk'
import {useCallback, useState} from 'react'

import {useWindowConnection} from '../comlink/useWindowConnection'
import {useStudioWorkspacesByProjectIdDataset} from './useStudioWorkspacesByProjectIdDataset'

/**
 * @public
 * @category Types
 */
export interface NavigateToStudioResult {
  navigateToStudioDocument: () => void
  isConnected: boolean
}

/**
 * @public
 *
 * Hook that provides a function to navigate to a given document in its parent Studio.
 *
 * Uses the `projectId` and `dataset` properties of the {@link DocumentHandle} you provide to resolve the correct Studio.
 * This will only work if you have deployed a studio with a workspace with this `projectId` / `dataset` combination.
 *
 * @remarks If you write your own Document Handle to pass to this hook (as opposed to a Document Handle generated by another hook),
 * it must include values for `documentId`, `documentType`, `projectId`, and `dataset`.
 *
 * @category Documents
 * @param documentHandle - The document handle for the document to navigate to
 * @returns An object containing:
 * - `navigateToStudioDocument` - Function that when called will navigate to the studio document
 * - `isConnected` - Boolean indicating if connection to Dashboard is established
 *
 * @example
 * ```ts
 * import {useNavigateToStudioDocument, type DocumentHandle} from '@sanity/sdk-react'
 *
 * function MyComponent({documentHandle}: {documentHandle: DocumentHandle}) {
 *   const {navigateToStudioDocument, isConnected} = useNavigateToStudioDocument(documentHandle)
 *
 *   return (
 *     <button onClick={navigateToStudioDocument} disabled={!isConnected}>
 *       Navigate to Studio Document
 *     </button>
 *   )
 * }
 * ```
 */
export function useNavigateToStudioDocument(
  documentHandle: DocumentHandle,
): NavigateToStudioResult {
  const {workspacesByProjectIdAndDataset, isConnected: workspacesConnected} =
    useStudioWorkspacesByProjectIdDataset()
  const [status, setStatus] = useState<Status>('idle')
  const {sendMessage} = useWindowConnection<Bridge.Navigation.NavigateToResourceMessage, never>({
    name: SDK_NODE_NAME,
    connectTo: SDK_CHANNEL_NAME,
    onStatus: setStatus,
  })

  const navigateToStudioDocument = useCallback(() => {
    const {projectId, dataset} = documentHandle

    if (!workspacesConnected || status !== 'connected' || !projectId || !dataset) {
      return
    }

    // Find the workspace for this document
    const workspaces = workspacesByProjectIdAndDataset[`${projectId}:${dataset}`]
    if (!workspaces?.length) {
      // eslint-disable-next-line no-console
      console.warn(
        `No workspace found for document with projectId: ${projectId} and dataset: ${dataset}`,
      )
      return
    }

    if (workspaces.length > 1) {
      // eslint-disable-next-line no-console
      console.warn('Multiple workspaces found for document', documentHandle)
      // eslint-disable-next-line no-console
      console.warn('Using the first one', workspaces[0])
    }

    const workspace = workspaces[0]

    const message: Bridge.Navigation.NavigateToResourceMessage = {
      type: 'dashboard/v1/bridge/navigate-to-resource',
      data: {
        resourceId: workspace._ref,
        resourceType: 'studio',
        path: `/intent/edit/id=${documentHandle.documentId};type=${documentHandle.documentType}`,
      },
    }

    sendMessage(message.type, message.data)
  }, [documentHandle, workspacesConnected, status, workspacesByProjectIdAndDataset, sendMessage])

  return {
    navigateToStudioDocument,
    isConnected: workspacesConnected && status === 'connected',
  }
}
